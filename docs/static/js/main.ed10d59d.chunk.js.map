{"version":3,"sources":["components/form.jsx","fixtures/simple.sol.jsx","utils/json2html.js","components/metrics.jsx","components/error.jsx","utils/parse-sol.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","className","htmlFor","id","rows","defaultValue","type","onClick","props","onFormSubmit","document","getElementById","value","Component","json2html","types","items","Object","keys","map","v","i","push","key","Metrics","render","metric","Version","LOC","Fragment","Error","errors","column","line","message","parseSol","code","root","parse","loc","window","children","slice","subNodes","w","flat","get_occurrences","end","array","tmp_o","forEach","App","handleFormSubmit","sc_code","setState","error","Helmet","state","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAkCeA,E,iLA9BD,IAAD,OACL,OACI,8BACI,yBAAKC,UAAU,cACX,2BAAOC,QAAQ,+BAAf,6CAGA,8BACID,UAAU,eACVE,GAAG,UACHC,KAAK,KACLC,aCfP,u6EDkBD,4BACIC,KAAK,SACLL,UAAU,uBACVM,QAAS,kBACL,EAAKC,MAAMC,aACPC,SAASC,eAAe,WAAWC,SAL/C,e,GAfGC,aEDZ,SAASC,EAAUC,GACtB,IAAMC,EAAQ,GASd,OARAC,OAAOC,KAAKH,GAAOI,KAAI,SAACC,EAAGC,GAAJ,OACnBL,EAAMM,KACF,wBAAIC,IAAKF,GACL,4BAAKD,GACL,4BAAKL,EAAMK,SAIhBJ,E,ICgBIQ,E,2MAxBXC,OAAS,WACL,IAAK,IAAD,EACgC,EAAKjB,MAAMkB,OAAnCC,EADR,EACQA,QAASC,EADjB,EACiBA,IAAKb,EADtB,EACsBA,MACtB,OACI,2BAAOd,UAAU,qBACb,+BACI,4BACI,8CACA,4BAAK0B,GAAW,cAEpB,4BACI,oDACA,4BAAKC,IAERd,EAAUC,KAIzB,SACE,OAAO,kBAAC,IAAMc,SAAP,Q,6BApBGhB,aCePiB,E,2MAdXL,OAAS,WACL,IAAK,IAAD,EACkC,EAAKjB,MAAMuB,OAAO,GADpD,EACQC,OADR,EACgBC,KADhB,EACsBC,QACtB,OACI,2BAAOjC,UAAU,qBACb,+BAAQa,EAAU,EAAKN,MAAMuB,OAAO,MAG9C,SACE,OAAO,kBAAC,IAAMF,SAAP,Q,6BAVChB,a,iBCDb,SAASsB,EAASC,GACrB,IAAMC,EAAOC,IAAMA,MAAMF,EAAM,CAAEG,KAAK,IACtCC,OAAOJ,KAAOA,EACdI,OAAOH,KAAOA,EACdG,OAAOF,MAAQA,IACf,IAAMvB,EAAQsB,EAAKI,SACdC,MAAM,GACNvB,KAAI,SAAAC,GAAC,OAAIA,EAAEuB,SAASxB,KAAI,SAAAyB,GAAC,OAAIA,EAAEtC,WAC/BuC,OACL,MAAO,CACH9B,MAAO+B,EAAgB/B,GACvBa,IAAKS,EAAKE,IAAIQ,IAAId,KAClBN,QAASU,EAAKI,SAAS,GAAG7B,OAIlC,IAAMkC,EAAkB,SAAAE,GACpB,IAAMC,EAAQ,GAEd,OADAD,EAAME,SAAQ,SAAA9B,GAAC,OAAK6B,EAAM7B,GAAK6B,EAAM7B,KAAQ6B,EAAM7B,GAAK,KACjD6B,GCmBIE,E,YA/BX,WAAY3C,GAAQ,IAAD,8BACf,4CAAMA,KAGV4C,iBAAmB,SAAAC,GACf,IACI,EAAKC,SAAS,CACV5B,OAAQS,EAASkB,GACjBtB,OAAQ,OAEd,MAAOwB,GACL,EAAKD,SAAS,CACV5B,OAAQ,KACRK,OAAQwB,EAAMxB,WAbP,EAiBnBN,OAAS,WACL,OACI,0BAAMxB,UAAU,aACZ,kBAACuD,EAAA,OAAD,KACI,0CAEJ,kBAAC,EAAD,CAAM/C,aAAc,EAAK2C,mBACzB,kBAAC,EAAD,CAAS1B,OAAQ,EAAK+B,MAAM/B,SAC5B,kBAAC,EAAD,CAAOK,OAAQ,EAAK0B,MAAM1B,WAvBlC,EAAK0B,MAAQ,GAFE,E,2BADL5C,aCIE6C,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCXNC,IAASrC,OAAO,kBAAC,EAAD,MAASf,SAASC,eAAe,SD0H3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed10d59d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { code } from \"../fixtures/simple.sol.jsx\";\n\nclass Form extends Component {\n    render() {\n        return (\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleFormControlTextarea1\">\n                        Insert the solidity code in this textarea\n                    </label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"sc_code\"\n                        rows=\"10\"\n                        defaultValue={code}\n                    ></textarea>\n                </div>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mb-2\"\n                    onClick={() =>\n                        this.props.onFormSubmit(\n                            document.getElementById(\"sc_code\").value\n                        )\n                    }\n                >\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Form;\n","export const code = `\n\npragma solidity ^0.4.10;\n\ncontract GasToken2 {\n    //////////////////////////////////////////////////////////////////////////\n    // RLP.sol\n    // Due to some unexplained bug, we get a slightly different bytecode if\n    // we use an import, and are then unable to verify the code in Etherscan\n    //////////////////////////////////////////////////////////////////////////\n\n    uint256 constant ADDRESS_BYTES = 20;\n    uint256 constant MAX_SINGLE_BYTE = 128;\n    uint256 constant MAX_NONCE = 256**9 - 1;\n\n    // count number of bytes required to represent an unsigned integer\n    function count_bytes(uint256 n) constant internal returns (uint256 c) {\n        uint i = 0;\n        uint mask = 1;\n        while (n >= mask) {\n            i += 1;\n            mask *= 256;\n        }\n\n        return i;\n    }\n\n    function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {\n\n        /*\n        * make sure the RLP encoding fits in one word:\n        * total_length      1 byte\n        * address_length    1 byte\n        * address          20 bytes\n        * nonce_length      1 byte (or 0)\n        * nonce           1-9 bytes\n        *                ==========\n        *                24-32 bytes\n        */\n       require(n <= MAX_NONCE);\n\n       // number of bytes required to write down the nonce\n       uint256 nonce_bytes;\n       // length in bytes of the RLP encoding of the nonce\n       uint256 nonce_rlp_len;\n\n       if (0 < n && n < MAX_SINGLE_BYTE) {\n           // nonce fits in a single byte\n           // RLP(nonce) = nonce\n           nonce_bytes = 1;\n           nonce_rlp_len = 1;\n       } else {\n           // RLP(nonce) = [num_bytes_in_nonce nonce]\n           nonce_bytes = count_bytes(n);\n           nonce_rlp_len = nonce_bytes + 1;\n       }\n\n       // [address_length(1) address(20) nonce_length(0 or 1) nonce(1-9)]\n       uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;\n\n       // concatenate all parts of the RLP encoding in the leading bytes of\n       // one 32-byte word\n       uint256 word = ((192 + tot_bytes) * 256**31) +\n                      ((128 + ADDRESS_BYTES) * 256**30) +\n                      (uint256(a) * 256**10);\n\n       if (0 < n && n < MAX_SINGLE_BYTE) {\n           word += n * 256**9;\n       } else {\n           word += (128 + nonce_bytes) * 256**9;\n           word += n * 256**(9 - nonce_bytes);\n       }\n    }\n}\n`;\n","import React from \"react\";\n\nexport function json2html(types) {\n    const items = [];\n    Object.keys(types).map((v, i) =>\n        items.push(\n            <tr key={i}>\n                <th>{v}</th>\n                <td>{types[v]}</td>\n            </tr>\n        )\n    );\n    return items;\n};\n","import React, { Component } from \"react\";\nimport { json2html } from \"../utils/json2html\";\n\nclass Metrics extends Component {\n    render = () => {\n        try {\n            const { Version, LOC, types } = this.props.metric;\n            return (\n                <table className=\"table table-hover\">\n                    <tbody>\n                        <tr>\n                            <th>Version Pragma</th>\n                            <td>{Version || \"Undefined\"}</td>\n                        </tr>\n                        <tr>\n                            <th>Source lines of code</th>\n                            <td>{LOC}</td>\n                        </tr>\n                        {json2html(types)}\n                    </tbody>\n                </table>\n            );\n        } catch {\n            return <React.Fragment></React.Fragment>;\n        }\n    };\n}\n\nexport default Metrics;\n","import React, { Component } from \"react\";\nimport { json2html } from \"../utils/json2html\";\n\nclass Error extends Component {\n    render = () => {\n        try {\n            const { column, line, message } = this.props.errors[0];\n            return (\n                <table className=\"table table-hover\">\n                    <tbody>{json2html(this.props.errors[0])}</tbody>\n                </table>\n            );\n        } catch {\n            return <React.Fragment></React.Fragment>;\n        }\n    };\n}\n\nexport default Error;\n","import parse from \"solidity-parser-antlr/dist\";\n\nexport function parseSol(code) {\n    const root = parse.parse(code, { loc: true });\n    window.code = code;\n    window.root = root;\n    window.parse = parse;\n    const types = root.children\n        .slice(1)\n        .map(v => v.subNodes.map(w => w.type))\n        .flat();\n    return {\n        types: get_occurrences(types),\n        LOC: root.loc.end.line,\n        Version: root.children[0].value\n    };\n}\n\nconst get_occurrences = array => {\n    const tmp_o = {};\n    array.forEach(v => (tmp_o[v] ? tmp_o[v]++ : (tmp_o[v] = 1)));\n    return tmp_o;\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Helmet } from \"react-helmet\";\nimport Form from \"./components/form\";\nimport Metrics from \"./components/metrics\";\nimport Error from \"./components/error\";\nimport { parseSol } from \"./utils/parse-sol\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    handleFormSubmit = sc_code => {\n        try {\n            this.setState({\n                metric: parseSol(sc_code),\n                errors: null\n            });\n        } catch (error) {\n            this.setState({\n                metric: null,\n                errors: error.errors\n            });\n        }\n    };\n    render = () => {\n        return (\n            <main className=\"container\">\n                <Helmet>\n                    <title>SOLPAR</title>\n                </Helmet>\n                <Form onFormSubmit={this.handleFormSubmit} />\n                <Metrics metric={this.state.metric} />\n                <Error errors={this.state.errors} />\n            </main>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}