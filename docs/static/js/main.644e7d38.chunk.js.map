{"version":3,"sources":["components/metric-form.jsx","utils/getContract.js","components/load-contract-form.jsx","fixtures/simple.sol.jsx","utils/json2html.js","components/metrics.jsx","components/error.jsx","components/head.jsx","utils/sol-parser.mjs","App.jsx","serviceWorker.js","index.js"],"names":["MetricForm","className","id","rows","type","onClick","props","onFormSubmit","document","getElementById","value","Component","getContractFromAddress","address","url","fetch","then","response","json","data","result","SourceCode","LoadContractForm","handleLoadSCFormSubmit","error","console","log","addr","classList","remove","match","add","placeholder","checkAddress","json2html","types","items","Object","keys","map","v","i","push","key","Metrics","render","metric","Fragment","Error","errors","Head","solParse","code","ast_j","parse","loc","ast_s","JSON","stringify","window","metrics","mapping","functions","payable","events","modifiers","contracts_definition","addresses","contracts","libraries","interfaces","version","get_version","total_lines","end","line","comments","get_comments","blanks","length","reg","RegExp","App","handleFormSubmit","data_input","setState","state","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.644e7d38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class MetricForm extends Component {\n    render() {\n        return (\n            <div className=\"card mt-2\">\n                <div className=\"card-body\">\n                    <div className=\"form-group\">\n                        <textarea\n                            className=\"form-control font-weight-light form-control-sm\"\n                            id=\"sc_code\"\n                            rows=\"10\"\n                        ></textarea>\n                    </div>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-info btn-block\"\n                        onClick={() =>\n                            this.props.onFormSubmit(\n                                document.getElementById(\"sc_code\").value\n                            )\n                        }\n                    >\n                        Compute the Solidity Metrics\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","export function getContractFromAddress(address) {\n    let url = `https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${address}&apikey=E5KM3HIGE2PV4RR763IQSXGZIV6UV638P2`;\n    return fetch(url)\n        .then(response => response.json())\n        .then(data => data.result[0].SourceCode);\n}\n","import React, { Component } from \"react\";\nimport { code } from \"../fixtures/simple.sol.jsx\";\nimport { getContractFromAddress } from \"../utils/getContract\";\n\nexport default class LoadContractForm extends Component {\n    componentDidMount() {\n        document.getElementById(\"sc_code\").value = code;\n    }\n    checkAddress(addr) {\n        document.getElementById(\"invalid\").classList.remove(\"d-block\");\n        !!addr.match(/^0x[a-zA-Z0-9]{40}$/) ||\n            document.getElementById(\"invalid\").classList.add(\"d-block\");\n    }\n    handleLoadSCFormSubmit = address => {\n        getContractFromAddress(address).then(data => {\n            try {\n                document.getElementById(\"sc_code\").value = data;\n            } catch (error) {\n                console.log(\"error:\", error);\n            }\n        });\n    };\n    render() {\n        return (\n            <div className=\"card \">\n                <div className=\"card-body\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <input\n                                className=\"form-control form-control-sm font-weight-light\"\n                                id=\"sc_address\"\n                                placeholder=\"Write a contract's address (0x7de6783f26e024ef2db774a0fd02742b11891d3f)\"\n                            />\n                        </div>\n                        <div className=\"col-6\">\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-sm btn-secondary btn-block\"\n                                onClick={() => {\n                                    const addr = document.getElementById(\n                                        \"sc_address\"\n                                    ).value;\n                                    this.checkAddress(addr);\n                                    this.handleLoadSCFormSubmit(addr);\n                                }}\n                            >\n                                Upload a Smart Contract from an address\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col pl-10\">\n                            <div className=\"invalid-feedback\" id=\"invalid\">\n                                Please choose a valid contract address such as:\n                                0x7de6783f26e024ef2db774a0fd02742b11891d3f\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","export const code = `/***** [You can write, edit or copy and paste a smart contract code here] *******/\n\npragma solidity ^0.4.10;\n\ncontract SimpleAuction {\n    event HighestBidIncreased(address bidder, uint amount); // Event\n    address public minter;\n    mapping (address => uint) public balances;\n    modifier onlySeller() { }\n      function bid() public payable {\n        emit HighestBidIncreased(msg.sender, msg.value); // Triggering event\n    }\n}\n\ninterface Token {\n  function transfer(address recipient, uint amount) public;\n}\n\nlibrary Set {\n}`;\n","import React from \"react\";\n\nexport function json2html(types) {\n    const items = [];\n    Object.keys(types).map((v, i) =>\n        items.push(\n            <tr key={i}>\n                <th>{v}</th>\n                <td>{types[v]}</td>\n            </tr>\n        )\n    );\n    return items;\n};\n","import React, { Component } from \"react\";\nimport { json2html } from \"../utils/json2html\";\n\nclass Metrics extends Component {\n    render = () => {\n        try {\n            return (\n                <table className=\"table table-hover table-sm table-bordered\">\n                    <tbody>{json2html(this.props.metric)}</tbody>\n                </table>\n            );\n        } catch (error) {\n            return <React.Fragment></React.Fragment>;\n        }\n    };\n}\n\nexport default Metrics;\n","import React, { Component } from \"react\";\nimport { json2html } from \"../utils/json2html\";\n\nclass Error extends Component {\n    render = () => {\n        try {\n            return (\n                <table className=\"table table-hover\">\n                    <tbody>{json2html(this.props.errors[0])}</tbody>\n                </table>\n            );\n        } catch {\n            return <React.Fragment></React.Fragment>;\n        }\n    };\n}\n\nexport default Error;\n","import React, { Component } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\n\nexport default class Head extends Component {\n    render = () => {\n        return (\n            <HelmetProvider>\n                <Helmet>\n                    <title>PASO</title>\n                </Helmet>\n                <h4 className=\"text-center font-weight-lighter font-italic pt-2\">\n                    PASO (PArse SOlidity smart contract code)\n                </h4>\n            </HelmetProvider>\n        );\n    };\n}\n","import parse from \"solidity-parser-antlr/dist\";\n\nexport function solParse(code) {\n    const ast_j = parse.parse(code, { loc: true });\n    const ast_s = JSON.stringify(ast_j);\n    try {window.ast_j = ast_j;} catch {}\n    \n    const metrics = {\n        mapping: '\"type\":\"Mapping\"',\n        functions: '\"type\":\"FunctionDefinition\"',\n        payable: '\"stateMutability\":\"payable\"',\n        events: '\"type\":\"EventDefinition\"',\n        modifiers: '\"type\":\"ModifierDefinition\"',\n        contracts_definition: '\"type\":\"ContractDefinition\"',\n        addresses: '\"type\":\"ElementaryTypeName\",\"name\":\"address\"',\n        contracts: '\"kind\":\"contract\"',\n        libraries: '\"kind\":\"library\"',\n        interfaces: '\"kind\":\"interface\"'\n    };\n    let result = {\n        version: get_version(ast_s),\n        total_lines: ast_j.loc.end.line,\n        comments: get_comments(code),\n        blanks: code.match(/((\\r\\n|\\n|\\r)$)|(^(\\r\\n|\\n|\\r))|^\\s*$/gm).length\n    };\n    for (const metric in metrics) {\n        let reg = metrics[metric];\n        result[metric] = (ast_s.match(new RegExp(reg, \"g\")) || []).length;\n    }\n\n    return result;\n}\n\nconst get_comments = code => {\n    const match = code.match(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(\\/\\/.*)/g);\n    return match ? match.length : 0\n}\n\nconst get_version = ast_s => {\n    let version = ast_s.match(\n        /\"name\":\"solidity\",\"value\":\"\\^(\\d{1,}.\\d{1,}.\\d{1,})/\n    );\n    return version ? version[1] : \"Not defined\";\n};\n","import React, { Component } from \"react\";\nimport MetricForm from \"./components/metric-form\";\nimport LoadContractForm from \"./components/load-contract-form\";\nimport Metrics from \"./components/metrics\";\nimport Error from \"./components/error\";\nimport Head from \"./components/head\";\nimport { solParse } from \"./utils/sol-parser\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    handleFormSubmit = data_input => {\n        try {\n            this.setState({\n                metric: solParse(data_input)\n            });\n        } catch (error) {\n            this.setState({\n                metric: null,\n                errors: error.errors\n            });\n        }\n    };\n\n    render = () => {\n        return (\n            <main className=\"container\">\n                <Head />\n                <LoadContractForm />\n                <MetricForm onFormSubmit={this.handleFormSubmit} />\n                <Metrics metric={this.state.metric} />\n                <Error errors={this.state.errors} />\n            </main>\n        );\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}